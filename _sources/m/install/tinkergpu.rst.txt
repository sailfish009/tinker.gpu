Build Tinker GPU
================

This section was generated by the Makefile. Every option usually has a
default value and is documented as **option=default_value**.
In order to override the defaults, set them in the command line as follows:

.. code-block:: bash

   make option1=value1 option2=value2 targets

Maintaining Multiple Build Directories
--------------------------------------
Please refer to **create_build** for creating build directories.

We strongly discourage compiling Tinker GPU object files within the source
code directory. A few options are necessary for
the `make` command, therefore, we recommend you write and keep a shell
script in every build directory to replace the general `make` command.

Some examples are given below.

.. code-block:: bash

   #!/bin/bash
   # file name: build-v1/z.sh
   # GPU/single/release/fftw_dir=$HOME/local/fftw
   make ignore=0 host=off prec=s opt=release \
   fftw_dir=$HOME/local/fftw "$@"

.. code-block:: bash

   #!/bin/tcsh
   # file name: build-v2/z.sh
   # CPU/doube/debug/fftw_dir=$HOME/local/fftw
   make ignore=0 host=on prec=d opt=debug \
   fftw_dir=$HOME/local/fftw "$argv"

Options
-------

**opt=release**
Optimization level. Other valid values are `debug` and `profile`.

**prec=real8**
Precision of the floating point numbers.

- These equivalent values all compile the code to double precision:
  `real8`, `8`, `64`, `double`, `d`.
- These equivalent values all compile the code to single precision:
  `real4`, `4`, `32`, `float`, `single`, `s`.
- These equivalent values all compile the code to mixed precision:
  `mixed`, `m`.

**host=1**
Flag to compile to GPU version or CPU version.

- These equivalent values all compile the code to GPU version:
  `false`, `off`, `0`.
- These equivalent values all compile the code to CPU version:
  `true`, `on`, `1`.

**deterministic_force (NO DEFAULT)**
Flag to use deterministic force. There is no default value for this flag.
This feature will be implicitly enabled by mixed and single precisions, but
can be explicitly disabled by setting the flag to `false`, `off`, or `0`,
and can be explicitly enabled by `true`, `on`, or `1`.

In general, evaluating energy, forces etc. twice, we don't expect to get
two identical answers, but we may not care as much because the difference
is usually negligible. (See
`Why is cos(x) != cos(y)? <https://isocpp.org/wiki/faq/newbie#floating-point-arith2>`_)
Whereas in MD, two simulations with the same initial configurations can
easily diverge due to the accumulated difference. If, for whatever reason,
you are willing to elongate the process of the inevitable divergence at the
cost of slightly slower simulation speed, a more "deterministic" force
(using fixed-point arithmetic) can help.

**build=build**
By default, Makefile can create a `build` directory in the current
working directory. This option allows you to use another name for
the build directory. For more information, see **create_build**.

**ignore=1**
The default value will minimize the warning messages from the `make`
command, especially when we run `make clean`, `make doc` etc., where
these warnings and errors are not critical. **ignore** can also be set to 0,
and is recommended to build the excutables.

**tinker_dir (NO DEFAULT)**
The directory in which user compiled the `libtinker`.
If this value is not set by a command line argument, Makefile will
attempt to locate `libtinker` under `$HOME/tinker/source` and emit a
fatal error when it fails to find it. No check will be performed if this
option is set explicitly via command line.

**fftw_dir / fftw_include / fftw_lib (NO DEFAULT)**
No default values are set for these three options.

**fftw_dir** is the top-level FFTW installation, under which
`include/fftw3.h` and `lib/libfftw3` are expected to be found.
If this value is not set by a command line argument, the Makefile will
attempt to locate them under `/usr/local`. No fatal error will
be emitted should the Makefile fail to find them.

**fftw_include** and **fftw_lib** will override the values set by
**fftw_dir**. No check will be performed on **fftw_*** if it set by the
command line argument.

**compute_capability=60,70**
CUDA compute capability. Valid values are 35, 60, 70, 75 etc., and can be
comma-separated, e.g. 35,60.

**cuda_dir=/usr/local/cuda**
Top-level CUDA installation directory, under which `include` and `lib`
directories are expected to be found.

Sometimes the PGI compiler and the NVCC compiler are not "compatible". For
instance, PGI 19.4 supports CUDA 9.2, 10.0, 10.1, and the default CUDA
version used in PGI 19.4 may be 9.2 and the external NVCC version is 10.1.
One solution is to pass `CUDA_HOME=${cuda_dir}` to the PGI compiler, in
which case, **cuda_dir** should be set to `/usr/local/cuda-10.1`.

**fortran_compiler=gfortran**
Path to the Fortran compiler that compiled `libtinker.a`.

**fortran_config/cxx_config/acc_config/link_config (UNSPECIFIED)**
Addtional files that contain Fortran, C++, OpenAcc and linker related flags.
This is the mechanism we adopt to extend the multi-compiler support.
The default file of each category on different operating systems are
different and there is **NO GUARANTEE** that the defaults will not change.
Tested compilers are tabulated below.

+-------+-------------------+--------------------+-----------------+-----------------+
| OS    | Fortran           | C++                | OpenACC         | Linker          |
+=======+===================+====================+=================+=================+
| Linux | gfortran          | g++                | pgc++ -ta=telsa | pgc++ -ta=telsa |
+-------+-------------------+--------------------+-----------------+-----------------+
| Linux | gfortran          | g++                | g++             | g++             |
+-------+-------------------+--------------------+-----------------+-----------------+
| Linux | ifort             | icpc               | pgc++ -ta=telsa | pgc++ -ta=telsa |
+-------+-------------------+--------------------+-----------------+-----------------+
| Linux | ifort             | icpc               | icpc            | icpc            |
+-------+-------------------+--------------------+-----------------+-----------------+
| macOS | gfortran homebrew | clang++ xcode 10.1 | clang++         | clang++         |
+-------+-------------------+--------------------+-----------------+-----------------+


Targets
-------

**default**
Compile and link the `tinker.gpu` executable.

**unittest**
Compile and link the `all.tests` executable.

**all**
Make two targets: `default` and `unittest`.

**test**
Run the unit tests in a random order. Exit on the first error.

**dirs**
Create sub-directories inside the build directory.

**copy_files**
Copy files to the build directory.

**create_build**
Setup the build directory, including copying the necessary files.
For example, setup a new build directory `build-v3`
inside the `tinker.gpu` directory:

.. code-block:: bash

   $> pwd
   /home/developer/tinker.gpu
   $> make -f make/Makefile create_build build=build-v3

**info**
Show some of the compiler and linker flags.

**doc**
Generate developers' manual with `doxygen`.

**man**
Generate user manual with `sphinx`.

**help**
Print the Makefile documentation in the terminal window.

**clean**
Clean up the current build directory.

**headers**
Test whether the `#include` directives in every header file are complete.

